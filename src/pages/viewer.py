import streamlit as st
from streamlit_option_menu import option_menu
from src.logic import spectra_reader
from src.logic import file
from src.logic import helper
from src.widgets import target
import matplotlib.pyplot as plt

plt.style.use("dark_background")


def show():
    st.title("Viewer")

    tab1, tab2, tab3 = st.tabs(["Spectra", "Optimization", "Multi-spectra Optimization"])

    with tab1:
        # Make 2 columns
        col1_1, col1_2 = st.columns([0.3, 0.7])

        # Column 1
        with col1_1:
            selected = None
            if len(spectra_reader.list_spectra_file_names()) == 0:
                st.warning("No spectra found.")
                return
            else:
                # options menu that displays spectra
                selected = option_menu("Spectra", spectra_reader.list_spectra_file_names() or [], default_index=0, key='spectra_menu')

            col1_1_1, col1_1_2 = st.columns(2)
            with col1_1_1:
                # Download file button
                # if st.button("Download spectrum"):
                #     spectrum = file.download_spectra_json_file(st.session_state['spectra_menu'])
                #     print("Download spectrum")
                st.download_button("Download spectrum", file.download_spectra_file(selected), file.download_spectra_filename(selected))
            with col1_1_2:
                # Delete file button
                if st.button("Delete spectrum"):
                    print("Delete spectrum")
                    spectra_reader.delete_spectra_file(st.session_state['spectra_menu'])
                    st.session_state['spectra_menu'] = spectra_reader.list_spectra_file_names()[0]

        with col1_2:
            if selected:
                # Get the selected spectra data list [{name: name, data: data}]
                data = spectra_reader.get_spectra_data(selected)

                fig, ax = plt.subplots()

                # Loop through the data
                for spectra in data:
                    ax.plot(spectra["data"], label=spectra["name"])

                # Add legend
                plt.legend()

                # Add title
                plt.title("Spectra")

                # Add to streamlit
                st.pyplot(fig)

    with tab2:
        # Make 2 columns
        col2_1, col2_2 = st.columns([0.3, 0.7])

        # Column 1
        with col2_1:
            # col1_1, col1_2 = st.columns(2)
            # with col1_1:
            #     # Download file button
            #     if st.button("Download spectrum"):
            #         print("Download spectrum")
            # with col1_2:
            #     # Delete file button
            #     if st.button("Delete spectrum"):
            #         print("Delete spectrum")
            #         spectra_reader.delete_spectra_file(st.session_state['spectra_menu'])
            #         st.session_state['spectra_menu'] = spectra_reader.list_spectra_file_names()[0]

            # options menu that displays spectra
            selected = option_menu("Date optimization", file.get_all_optimization_dates() or [], default_index=0, key='optimization_menu')

        with col2_2:
            # Show values generated by the optimization
            st.markdown("##### Optimized values")
            optimized_data_values = file.get_data_from_generated_sample(selected)
            st.table(optimized_data_values)

            # Original spectra
            st.markdown("##### Spectra")

            # Have a radio button to select x_axis to be line number or energy
            x_axis_radio = st.radio("Select x-axis", ["Line number", "Energy"], key="x_axis")

            original_data = file.get_spectra_json_file(selected)
            optimized_data = file.get_spectra_json_file(selected, original=False)

            # Get x axis data
            x_axis_data = helper.get_x_axis_data(x_axis_radio, original_data, optimized_data_values["offset"], optimized_data_values["factor"])

            fig, ax = plt.subplots()

            # Plot original spectra as dots
            for spectra in original_data:
                # down_sampled_data = helper.down_sample_data(spectra["data"], 5)
                # down_sampled_x_axis_data = helper.down_sample_data(x_axis_data, 5)
                # ax.plot(down_sampled_x_axis_data, down_sampled_data, 'o', label=f"Original - {spectra['name']}")
                ax.plot(x_axis_data, spectra["data"], 'o', label=f"Original - {spectra['name']}")

            # Plot optimized spectra as a line chart
            for spectra in optimized_data:
                ax.plot(x_axis_data, spectra["data"], label=f"Optimized - {spectra['name']}")

            # Add legend
            plt.legend()

            # Add title
            plt.title("Original and Optimized Spectra")

            if x_axis_radio == "Line number":
                plt.xlabel("Line number")
            else:
                plt.xlabel("Energy (keV)")

            plt.ylabel("Counts")
            # Add to streamlit
            st.pyplot(fig)

            # Target
            st.markdown("## Target")
            generated_target = file.get_target_from_generated_sample(selected)
            target.display_target(generated_target)

        with tab3:
            # Make 2 columns
            col3_1, col3_2 = st.columns([0.3, 0.7])

            # Column 1
            with col3_1:
                # options menu that displays spectra
                selected_ms = option_menu("Date optimization", file.get_all_optimization_ms_dates() or [], default_index=0, key='optimization_menu_ms')

            with col3_2:
                # Show values generated by the optimization
                st.markdown("##### Optimized shared values")
                optimized_data_values_ms = file.get_data_from_generated_sample_ms(selected_ms)
                st.table({
                    "fitness": [optimized_data_values_ms["fitness"]],
                    "optimizationTime": [optimized_data_values_ms["optimizationTime"]]
                })

                # Target
                st.markdown("## Target")
                generated_target_ms = file.get_target_from_generated_sample_ms(selected_ms)
                target.display_target(generated_target_ms)

                # Original spectra
                st.markdown("##### Spectra")

                # Have a radio button to select x_axis to be line number or energy
                x_axis_radio_ms = st.radio("Select x-axis", ["Line number", "Energy"], key="x_axis_ms")

                original_data = file.get_all_original_spectra_json_data(selected_ms)
                optimized_data = file.get_all_optimized_spectra_json_data(selected_ms)

                for i in range(len(original_data)):
                    offset = optimized_data_values_ms["spectraParameters"][i]["offset"]
                    factor = optimized_data_values_ms["spectraParameters"][i]["factor"]

                    # Plot optimized_data_values_ms
                    st.markdown(f"##### Spectra {i + 1}")
                    st.table(optimized_data_values_ms["spectraParameters"][i])
                    # Get x axis data
                    x_axis_data = helper.get_x_axis_data(x_axis_radio_ms, original_data[i], offset, factor)

                    fig, ax = plt.subplots()

                    # Plot original spectra as dots
                    for spectra in original_data[i]:
                        ax.plot(x_axis_data, spectra["data"], 'o', label=f"Original - {spectra['name']}")

                    # Plot optimized spectra as a line chart
                    for spectra in optimized_data[i]:
                        ax.plot(x_axis_data, spectra["data"], label=f"Optimized - {spectra['name']}")

                    # Add legend
                    plt.legend()

                    # Add title
                    plt.title(f"Original and Optimized Spectra - {i + 1}")

                    if x_axis_radio == "Line number":
                        plt.xlabel("Line number")
                    else:
                        plt.xlabel("Energy (keV)")

                    plt.ylabel("Counts")
                    # Add to streamlit
                    st.pyplot(fig)








